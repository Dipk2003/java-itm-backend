spring.application.name=itech-backend

# Database Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/itech_db
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA Settings
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# Server Port
server.port=8080

# JWT Properties
jwt.secret=a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2
jwt.expiration-in-ms=86400000

# CORS Configuration (additional to Java config)
spring.web.cors.allowed-origins=http://localhost:3000
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=true

# Logging Configuration
logging.level.com.itech.itech_backend=DEBUG
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.web=DEBUG

# Actuator endpoints (for monitoring)
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=when-authorized

# Email Configuration (Gmail SMTP)
# STEP 1: Replace 'your-email@gmail.com' with your actual Gmail address
# STEP 2: Replace 'your-app-password' with your Gmail App Password
# STEP 3: Set email.simulation.enabled=false to enable real emails
# Make sure to complete the Gmail credentials under spring.mail.username and spring.mail.password
# 
# How to get Gmail App Password:
# IMPORTANT: Ensure 'spring.mail.username' and 'spring.mail.password' are populated with your actual Gmail address and app password.
# 1. Go to https://myaccount.google.com/security
# 2. Enable 2-Step Verification
# 3. Go to App passwords and create one for "Mail"
# 4. Use that 16-character password below

spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=ultimate.itech4@gmail.com
spring.mail.password=Uit4@1135##
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.ssl.protocols=TLSv1.2
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=3000
spring.mail.properties.mail.smtp.writetimeout=5000

# Set to false to enable real email sending
email.simulation.enabled=false

# SMS Configuration (Twilio)
twilio.account.sid=your_account_sid
twilio.auth.token=your_auth_token
twilio.phone.number=+1234567890

# Alternative SMS Configuration (for Indian providers)
# Free SMS for development (limited)
textlocal.api.key=your_textlocal_api_key
msg91.api.key=your_msg91_api_key
msg91.template.id=your_template_id
sms.simulation.enabled=true

# Quicko API Configuration
quicko.api.base-url=https://api.quicko.com
quicko.api.key=${QUICKO_API_KEY:}
quicko.api.timeout=30
quicko.api.enabled=${QUICKO_API_ENABLED:false}
quicko.api.retry.max-attempts=3
quicko.api.retry.delay=1000

# Production Quicko API Setup:
# 1. Set environment variable: QUICKO_API_KEY=your_actual_api_key
# 2. Set environment variable: QUICKO_API_ENABLED=true
# 3. Verify the base URL with Quicko documentation
# 
# Development Mode:
# - When QUICKO_API_ENABLED=false, realistic mock data is returned
# - Perfect for development and testing
